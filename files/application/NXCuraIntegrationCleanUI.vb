'==============================================================================
'  WARNING!!  This file is overwritten by the Block UI Styler while generating
'  the automation code. Any modifications to this file will be lost after
'  generating the code again.
'
'       Filename:  C:\Software_Installed\SPLM\USER_DIR\application\NX10CuraIntergrationCleanUI.vb
'
'        This file was generated by the NX Block UI Styler
'        Created by: Wim
'              Version: NX 10
'              Date: 06-27-2017  (Format: mm-dd-yyyy)
'              Time: 14:50 (Format: hh-mm)
'        Updated by: Ruud
'              Version: NX 10
'              Date: 10-18-2017  (Format: mm-dd-yyyy)
'              Time: 14:50 (Format: hh-mm)
'			   Update: Rem on Echo("STL: " & targetFile) +  Echo("Processing " & thisTag.ToString())
'
'==============================================================================
'
'==============================================================================
'  Purpose:  This TEMPLATE file contains VB.NET source to guide you in the
'  construction of your Block application dialog. The generation of your
'  dialog file (.dlx extension) is the first step towards dialog construction
'  within NX.  You must now create a NX Open application that
'  utilizes this file (.dlx).
'
'  The information in this file provides you with the following:
'
'  1.  Help on how to load and display your Block UI Styler dialog in NX
'      using APIs provided in NXOpen.BlockStyler namespace
'  2.  The empty callback methods (stubs) associated with your dialog items
'      have also been placed in this file. These empty methods have been
'      created simply to start you along with your coding requirements.
'      The method name, argument list and possible return values have already
'      been provided for you.
'==============================================================================

'------------------------------------------------------------------------------
'These imports are needed for the following template code
'------------------------------------------------------------------------------
Option Strict Off
Imports System
Imports System.Collections
Imports System.Diagnostics
Imports Microsoft.Win32
Imports NXOpen
Imports NXOpen.BlockStyler
Imports NXOpen.UF

'------------------------------------------------------------------------------
'Represents Block Styler application class
'------------------------------------------------------------------------------
Public Class NXCuraIntegrationCleanUI
    'class members
    Private Shared theSession As Session
    Private Shared theUFSession As UFSession
    Private Shared theCuraLocation As String
    Dim targetFile As [String] = Environment.GetEnvironmentVariable("TEMP") + "\STL_NX.stl"
    Dim bodyOccArrayList As System.Collections.ArrayList = New ArrayList()
    Dim interactiveMode As Boolean
    Private Shared theUI As UI
    Private theDlxFileName As String
    Private theDialog As NXOpen.BlockStyler.BlockDialog
    Private Interactive As NXOpen.BlockStyler.Toggle ' Block type: Toggle
    Private Body_Group As NXOpen.BlockStyler.Group ' Block type: Group
    Private bodySelect0 As NXOpen.BlockStyler.BodyCollector ' Block type: Body Collector

    '------------------------------------------------------------------------------
    'Bit Option for Property: EntityType
    '------------------------------------------------------------------------------
    Public Shared ReadOnly EntityType_AllowBodies As Integer = 64
    '------------------------------------------------------------------------------
    'Bit Option for Property: BodyRules
    '------------------------------------------------------------------------------
    Public Shared ReadOnly BodyRules_SingleBody As Integer = 1
    Public Shared ReadOnly BodyRules_FeatureBodies As Integer = 2
    Public Shared ReadOnly BodyRules_BodiesinGroup As Integer = 4

#Region "Block Styler Dialog Designer generator code"
    '------------------------------------------------------------------------------
    'Constructor for NX Styler class
    '------------------------------------------------------------------------------
    Public Sub New()
        Try
            theSession = Session.GetSession()
            theUFSession = UFSession.GetUFSession()
            theUI = UI.GetUI()
            theCuraLocation = GetCuraLocation()
            theDlxFileName = "NXCuraCleanUI.dlx"
            theDialog = theUI.CreateDialog(theDlxFileName)
            theDialog.AddApplyHandler(AddressOf apply_cb)
            theDialog.AddOkHandler(AddressOf ok_cb)
            theDialog.AddUpdateHandler(AddressOf update_cb)
            theDialog.AddInitializeHandler(AddressOf initialize_cb)
            theDialog.AddDialogShownHandler(AddressOf dialogShown_cb)

        Catch ex As Exception

            '---- Enter your exception handling code here -----
            Throw ex
        End Try
    End Sub
#End Region

    '------------------------------- DIALOG LAUNCHING ---------------------------------
    '
    '    Before invoking this application one needs to open any part/empty part in NX
    '    because of the behavior of the blocks.
    '
    '    Make sure the dlx file is in one of the following locations:
    '        1.) From where NX session is launched
    '        2.) $UGII_USER_DIR/application
    '        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    '            recommended. This variable is set to a full directory path to a file 
    '            containing a list of root directories for all custom applications.
    '            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    '
    '    You can create the dialog using one of the following way:
    '
    '    1. Journal Replay
    '
    '        1) Replay this file through Tool->Journal->Play Menu.
    '
    '    2. USER EXIT
    '
    '        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    '        2) Invoke the Shared Library through File->Execute->NX Open menu.
    '
    '------------------------------------------------------------------------------
    Public Shared Sub Main()
        Dim nxCuraIntegrationSession As NXCuraIntegrationCleanUI = Nothing
        Try

            nxCuraIntegrationSession = New NXCuraIntegrationCleanUI()
            ' The following method shows the dialog immediately
            nxCuraIntegrationSession.Show()

        Catch ex As Exception

            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        Finally
            If nxCuraIntegrationSession IsNot Nothing Then
                nxCuraIntegrationSession.Dispose()
                nxCuraIntegrationSession = Nothing
            End If
        End Try
    End Sub
    '------------------------------------------------------------------------------
    ' This method specifies how a shared image is unloaded from memory
    ' within NX. This method gives you the capability to unload an
    ' internal NX Open application or user  exit from NX. Specify any
    ' one of the three constants as a return value to determine the type
    ' of unload to perform:
    '
    '
    '    Immediately : unload the library as soon as the automation program has completed
    '    Explicitly  : unload the library from the "Unload Shared Image" dialog
    '    AtTermination : unload the library when the NX session terminates
    '
    '
    ' NOTE:  A program which associates NX Open applications with the menubar
    ' MUST NOT use this option since it will UNLOAD your NX Open application image
    ' from the menubar.
    '------------------------------------------------------------------------------
    Public Shared Function GetUnloadOption(ByVal arg As String) As Integer
        'Return CType(Session.LibraryUnloadOption.Explicitly, Integer)
        Return CType(Session.LibraryUnloadOption.Immediately, Integer)
        ' Return CType(Session.LibraryUnloadOption.AtTermination, Integer)
    End Function
    '------------------------------------------------------------------------------
    ' Following method cleanup any housekeeping chores that may be needed.
    ' This method is automatically called by NX.
    '------------------------------------------------------------------------------
    Public Shared Sub UnloadLibrary(ByVal arg As String)
        Try


        Catch ex As Exception

            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Sub

    '------------------------------------------------------------------------------
    'This method shows the dialog on the screen
    '------------------------------------------------------------------------------
    Public Sub Show()
        Try

            theDialog.Show()

        Catch ex As Exception

            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Sub

    '------------------------------------------------------------------------------
    'Method Name: Dispose
    '------------------------------------------------------------------------------
    Public Sub Dispose()
        If theDialog IsNot Nothing Then
            theDialog.Dispose()
            theDialog = Nothing
        End If
    End Sub

    '------------------------------------------------------------------------------
    '---------------------Block UI Styler Callback Functions--------------------------
    '------------------------------------------------------------------------------

    '------------------------------------------------------------------------------
    'Callback Name: initialize_cb
    '------------------------------------------------------------------------------
    Public Sub initialize_cb()
        Try
            Interactive = CType(theDialog.TopBlock.FindBlock("Interactive"), NXOpen.BlockStyler.Toggle)
            Body_Group = CType(theDialog.TopBlock.FindBlock("Body_Group"), NXOpen.BlockStyler.Group)
            bodySelect0 = CType(theDialog.TopBlock.FindBlock("bodySelect0"), NXOpen.BlockStyler.BodyCollector)

        Catch ex As Exception

            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Sub

    '------------------------------------------------------------------------------
    'Callback Name: dialogShown_cb
    'This callback is executed just before the dialog launch. Thus any value set 
    'here will take precedence and dialog will be launched showing that value. 
    '------------------------------------------------------------------------------
    Public Sub dialogShown_cb()
        Try

            '---- Enter your callback code here -----

        Catch ex As Exception

            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Sub

    '------------------------------------------------------------------------------
    'Callback Name: apply_cb
    '------------------------------------------------------------------------------
    Public Function apply_cb() As Integer
        Dim errorCode As Integer = 0
        Try

            '---- Enter your callback code here -----


        Catch ex As Exception

            '---- Enter your exception handling code here -----
            errorCode = 1
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
        apply_cb = errorCode
    End Function

    '------------------------------------------------------------------------------
    'Callback Name: update_cb
    '------------------------------------------------------------------------------
    Public Function update_cb(ByVal block As NXOpen.BlockStyler.UIBlock) As Integer
        Try

            If block Is Interactive Then
                '---- Enter your code here -----
                Dim PreviewToggleproplist As PropertyList = Interactive.GetProperties
                interactiveMode = PreviewToggleproplist.GetLogical("Value")
                PreviewToggleproplist.Dispose()
                PreviewToggleproplist = Nothing

            ElseIf block Is bodySelect0 Then
                '---- Enter your code here -----

                For Each taggedObj As TaggedObject In bodySelect0.GetSelectedObjects()
                    bodyOccArrayList.Add(taggedObj.Tag)
                Next

            End If

        Catch ex As Exception

            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
        update_cb = 0
    End Function

    '------------------------------------------------------------------------------
    'Callback Name: ok_cb
    '------------------------------------------------------------------------------
    Public Function ok_cb() As Integer
        Dim errorCode As Integer = 0
        Try

            '---- Enter your callback code here -----
            MainProgram() 'Execute the export
            errorCode = apply_cb()

        Catch ex As Exception

            '---- Enter your exception handling code here -----
            errorCode = 1
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
        ok_cb = errorCode
    End Function

    '------------------------------------------------------------------------------
    'Function Name: GetBlockProperties
    'Returns the propertylist of the specified BlockID
    '------------------------------------------------------------------------------
    Public Function GetBlockProperties(ByVal blockID As String) As PropertyList
        GetBlockProperties = Nothing
        Try

            GetBlockProperties = theDialog.GetBlockProperties(blockID)

        Catch ex As Exception

            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Function

    Sub MainProgram()

        Dim dp As Part = theSession.Parts.Display
        Dim thisBodyTag As NXOpen.Tag = NXOpen.Tag.Null
        Dim fileHandle As IntPtr
        'Echo("STL: " & targetFile)

        theUFSession.Std.OpenBinaryStlFile(targetFile, False, "Created by NXOpen", fileHandle)

        For Each thisTag As NXOpen.Tag In bodyOccArrayList

            'Echo("Processing " & thisTag.ToString())
            Dim num_errors As Integer
            Dim error_info As UFStd.StlError() = {}

            theUFSession.Std.PutSolidInStlFile(fileHandle, NXOpen.Tag.Null, thisTag, 0, 100, 0.01, num_errors, error_info)
            Echo("Number of errors: " & num_errors)
            Dim cntr As Integer = 0

            For cntr = 0 To num_errors - 1
                Echo(error_info(cntr).error_code)
                Dim theMsg As String = ""
                theUFSession.UF.GetFailMessage(error_info(cntr).error_code, theMsg)
                Echo(theMsg)
            Next

        Next

        theUFSession.Std.CloseStlFile(fileHandle)
        ' Call the System.Diagnostics.Process - Cura application
        CallCuraApplicationInstance()

    End Sub

    Sub Echo(ByVal output As String)

        theSession.ListingWindow.Open()
        theSession.ListingWindow.WriteLine(output)
        theSession.LogFile.WriteLine(output)

    End Sub

    Public Sub CallCuraApplicationInstance()
        Dim myProcess As Process = New Process()

        myProcess.StartInfo.FileName = theCuraLocation
        myProcess.StartInfo.Arguments = "--single-instance " + targetFile.ToString()
        myProcess.StartInfo.UseShellExecute = False
        myProcess.StartInfo.CreateNoWindow = True
        myProcess.StartInfo.RedirectStandardInput = True
        myProcess.StartInfo.RedirectStandardOutput = True
        myProcess.StartInfo.RedirectStandardError = True
        myProcess.Start()

    End Sub

    Private Function GetCuraLocation() As String
        Const strKeyPath = "SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"

        Dim regKey = Registry.LocalMachine.OpenSubKey(strKeyPath, False)
        Try
            'Get all Cura key names
            Dim curaKeyNameList As New ArrayList
            For Each regKeyName As String In regKey.GetSubKeyNames()								
                If regKeyName.StartsWith("UltiMaker Cura ") Or regKeyName.StartsWith("Cura ") Then
                    curaKeyNameList.Add(regKeyName)
                End If
            Next

            'Get the latest Cura key name
            curaKeyNameList.Sort()
            Dim lastestCuraKeyName = curaKeyNameList.Item(curaKeyNameList.Count - 1)

            'Get the installation location of the latest Cura
            Dim latestCuraKeyPath = strKeyPath + "\" + lastestCuraKeyName
            regKey = Registry.LocalMachine.OpenSubKey(latestCuraKeyPath, False)
            Dim latestCuraIconLocation As String = regKey.GetValue("DisplayIcon", "")

            Dim curaInstallationDir = latestCuraIconLocation.Substring(0, latestCuraIconLocation.LastIndexOf("\") + 1)
            Dim curaExecutablePath = curaInstallationDir + "UltiMaker-Cura.exe"

            Return curaExecutablePath

        Catch ex As Exception
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
            
    End Function

End Class
